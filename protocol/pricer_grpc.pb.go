// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricerClient is the client API for Pricer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricerClient interface {
	Get(ctx context.Context, opts ...grpc.CallOption) (Pricer_GetClient, error)
}

type pricerClient struct {
	cc grpc.ClientConnInterface
}

func NewPricerClient(cc grpc.ClientConnInterface) PricerClient {
	return &pricerClient{cc}
}

func (c *pricerClient) Get(ctx context.Context, opts ...grpc.CallOption) (Pricer_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pricer_ServiceDesc.Streams[0], "/pgrpc.Pricer/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &pricerGetClient{stream}
	return x, nil
}

type Pricer_GetClient interface {
	Send(*Id) error
	Recv() (*Stock, error)
	grpc.ClientStream
}

type pricerGetClient struct {
	grpc.ClientStream
}

func (x *pricerGetClient) Send(m *Id) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pricerGetClient) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PricerServer is the server API for Pricer service.
// All implementations must embed UnimplementedPricerServer
// for forward compatibility
type PricerServer interface {
	Get(Pricer_GetServer) error
	mustEmbedUnimplementedPricerServer()
}

// UnimplementedPricerServer must be embedded to have forward compatible implementations.
type UnimplementedPricerServer struct {
}

func (UnimplementedPricerServer) Get(Pricer_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPricerServer) mustEmbedUnimplementedPricerServer() {}

// UnsafePricerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricerServer will
// result in compilation errors.
type UnsafePricerServer interface {
	mustEmbedUnimplementedPricerServer()
}

func RegisterPricerServer(s grpc.ServiceRegistrar, srv PricerServer) {
	s.RegisterService(&Pricer_ServiceDesc, srv)
}

func _Pricer_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PricerServer).Get(&pricerGetServer{stream})
}

type Pricer_GetServer interface {
	Send(*Stock) error
	Recv() (*Id, error)
	grpc.ServerStream
}

type pricerGetServer struct {
	grpc.ServerStream
}

func (x *pricerGetServer) Send(m *Stock) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pricerGetServer) Recv() (*Id, error) {
	m := new(Id)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Pricer_ServiceDesc is the grpc.ServiceDesc for Pricer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pricer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgrpc.Pricer",
	HandlerType: (*PricerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Pricer_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/pricer.proto",
}
